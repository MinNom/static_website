# see OpenProject on local Proxmox for more details on this project

#Create repo locally
mkdir -p ./projectslocalrepo/static_website

#Move into repo directory and initialize
cd static_website/
git init
cat .git/config 

#Use the github tool to set up the repo remotely with required flags
gh repo create --public -s ~/projectslocalrepo/static_website -r website_static --add-readme -d "test of static website pushed programatically from github"

#Save a record of cmds executed
history | tail -30
history | tail -30 | cat > genesis_cmds.txt

#View your repos with teh github gh tool
gh repo list

#update the to new naming convention master to main
git branch -m master main

#Check the repo's status and logs before & after adding files and committing changes
git status
git log
git add .
git status
git log
git commit -m "added genesis_cmds.txt: repo setup inx"
git status

#Check the repo's config file and add the path to the remote repo on github
cat .git/config 
git remote add origin git@github.com:crackdev-in/static_website.git
cat .git/config 

#Push changes to the remote repo on github
git push -u origin main

#Check status and logs of repo
git status
git log

#Append and filter new & relevant cmds to this file
history | tail -30 >> genesis_cmds.txt



# added and committed to self cmds documentation genesis_cmds.txt
 2101  git commit -am "genesis_cmds.txt: added new cmds master to main, added remote repo path, add,commit,push to remote, check repo status and logs"
 2102  git log 

# added index and about html pages and placeholder content to index, the about has details of the project. add and commit the index ad about files and push to remote repo
 2106  touch index.html about.html
 2107  nano index.html
 2108  nano about.html 
 2109  cat index.html > about.html 
 2110  nano about.html 
 2111  git status
 2112  git add .
 2113  git commit -am "added index.html & about.html, about.html: lists purpose and skills usage in this project also content can be used in the README.md index.html: basic hand typed html for demo purpose, serves as a good refresher for long dormant html skills and keeps the code simple as UI is not the focus here"
 2114  git push origin main 
 2115  git log
 2120  history | tail -20 >> genesis_cmds.txt 

# setup ec2 on aws
# moved .pem key to .ssh and chmod 400
# login to ec2 instance from local with above pem key and Public IP
# on ec2 instance update and upgrade the instance

# cmdline
 2001  git log
 2002  git status
 2003  git diff
 2004  git commit -am "genesis_cmds.txt: add comment of ec2 setup, pem key, login to instance, and instance prep update & upgrad"
 2005  git diff
 2006  git log
 2007  git status
 2008  git push origin main
 2009  ls
 2010  history | tail -10 >> genesis_cmds.txt 


# Install webserver http2 [apache]
optional - sudo ufw app list
sudo apt install apache2
systemctl status apache2
optional - sudo ufw app list
browse to the public ip to the the "It works" page.
install tmux if not already installed

Browse to var/www/html
save original apache ("It works") landing page to backup and create your own test page

# configure ports 80, 22 under a security group
see OpenProject for security group

# Copy files from local to remote and test if website is publicly accessible
mkdir a dir in ec2 home folder static_website_staging
Copy local html files from static_website to ec2 instance, and then transfer to website at /var/www/html
sudo scp -i ~/.ssh/static_webpage.pem /home/<USER>/projectslocalrepo/static_website/*.html ubuntu@xxx.xxx.xxx.xxx:~/static_website_staging

# ec2: copy from staging to webserver folder
sudo cp ./static_website_staging/* /var/www/html/


# Added a text for automation test
nano index.html 
git status
git diff
git commit -am "index.html: added test text for local to aws automation"

# automate checking of static_website_staging for changes and copy to webserver folder /var/www/html
# used similar while on piserver(RaspiDash) and similar to 2014-15 IoT server, need to locate and check that code
while true; do sudo diff index.html /var/www/html/index.html >/dev/null 2>&1; if [ $? -eq 0 ]; then echo "No changes"; else sudo cp *.html /var/www/html; echo "files updated"; fi; sleep 10; done

verify website output on public IP 
or 
sudo cat /var/www/html/index.html 


# todo edit the ec2 to run script on boot - cron,systemd,rc.local,init.d
#Create a script
chmod +x /home/ubuntu/startup.sh
# Set a crontab for it:
crontab -e
@reboot  /home/ubuntu/startup.sh

# Reboot the ec2 instance and test
	
# 	
